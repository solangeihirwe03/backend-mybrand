{"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\index.ts":{"path":"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":15},"end":{"line":7,"column":47}},"5":{"start":{"line":8,"column":20},"end":{"line":8,"column":66}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":38}},"7":{"start":{"line":10,"column":24},"end":{"line":10,"column":68}},"8":{"start":{"line":11,"column":12},"end":{"line":11,"column":36}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":36}},"11":{"start":{"line":14,"column":0},"end":{"line":18,"column":3}},"12":{"start":{"line":15,"column":4},"end":{"line":17,"column":7}},"13":{"start":{"line":19,"column":0},"end":{"line":19,"column":37}},"14":{"start":{"line":20,"column":0},"end":{"line":20,"column":34}},"15":{"start":{"line":21,"column":13},"end":{"line":21,"column":17}},"16":{"start":{"line":22,"column":0},"end":{"line":24,"column":3}},"17":{"start":{"line":23,"column":4},"end":{"line":23,"column":48}},"18":{"start":{"line":25,"column":0},"end":{"line":25,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":13},"end":{"line":14,"column":14}},"loc":{"start":{"line":14,"column":27},"end":{"line":18,"column":1}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":17},"end":{"line":22,"column":18}},"loc":{"start":{"line":22,"column":23},"end":{"line":24,"column":1}},"line":22}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1},"f":{"0":4,"1":0,"2":1},"b":{"0":[1,1,1],"1":[2,2],"2":[4,4]},"inputSourceMap":{"version":3,"file":"C:/Users/USER/Documents/andela/backend-mybrand/src/index.ts","sources":["C:/Users/USER/Documents/andela/backend-mybrand/src/index.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,gDAAwB;AACxB,mEAAwC;AACxC,sCAAmC;AACnC,qEAA4C;AAE5C,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AACtB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,GAAG,CAAC,GAAG,CAAC,IAAA,cAAI,EAAC,KAAY,CAAC,CAAC,CAAC;AAG5B,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAoB,EAAE,GAAqB,EAAE,EAAE;IAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,OAAO,EAAE,qBAAqB;KAC/B,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAM,CAAC,CAAC;AAExB,IAAA,uBAAY,EAAC,GAAG,CAAC,CAAC;AAGlB,MAAM,IAAI,GAAG,IAAI,CAAC;AAElB,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAE,EAAE;IACjB,OAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI,EAAE,CAAC,CAAC;AAEhD,CAAC,CAAC,CAAC;AAEH,kBAAe,GAAG,CAAC","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport router from './routes/allroutes';\r\nimport './database/config/database'\r\nimport swaggerSetup from '../swaggerConfig';\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors(\" * \" as any));\r\n\r\n\r\napp.get(\"/\", (rep: express.Request, res: express.Response) => {\r\n  res.status(200).json({\r\n    message: \"Welcome to my Brand\",\r\n  });\r\n});\r\n\r\napp.use(\"/api\", router);\r\n\r\nswaggerSetup(app);\r\n\r\n\r\nconst PORT = 6000;\r\n\r\napp.listen(PORT, ()=>{\r\n    console.log(`Server is running on ${PORT}`);\r\n\r\n});\r\n\r\nexport default app;\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8a93c24d13eb71253ddb40e13dab1b784f0a0826"},"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\allroutes.ts":{"path":"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\allroutes.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":21},"end":{"line":7,"column":61}},"5":{"start":{"line":8,"column":24},"end":{"line":8,"column":67}},"6":{"start":{"line":9,"column":21},"end":{"line":9,"column":61}},"7":{"start":{"line":10,"column":15},"end":{"line":10,"column":41}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":43}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"10":{"start":{"line":13,"column":0},"end":{"line":13,"column":43}},"11":{"start":{"line":14,"column":0},"end":{"line":14,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1},"f":{"0":4},"b":{"0":[1,1,1],"1":[3,1],"2":[4,4]},"inputSourceMap":{"version":3,"file":"C:/Users/USER/Documents/andela/backend-mybrand/src/routes/allroutes.ts","sources":["C:/Users/USER/Documents/andela/backend-mybrand/src/routes/allroutes.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAE9B,8DAAqC;AACrC,oEAA4C;AAC5C,8DAAsC;AAEtC,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,oBAAS,CAAC,CAAC;AAChC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,uBAAa,CAAC,CAAA;AACtC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,oBAAU,CAAC,CAAC;AAEjC,kBAAe,MAAM,CAAA","sourcesContent":["import express from 'express';\r\n\r\nimport userRoute from './userRoutes';\r\nimport messageRoutes from './messageRoutes';\r\nimport blogRoutes from './blogRoutes';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\"/users\", userRoute);\r\nrouter.use('/messages', messageRoutes)\r\nrouter.use('/blogs', blogRoutes);\r\n\r\nexport default router"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1f805d4562085e9e016dea4f77836a29e07d24ce"},"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\userRoutes.ts":{"path":"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\userRoutes.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":64}},"5":{"start":{"line":8,"column":25},"end":{"line":8,"column":77}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":41}},"7":{"start":{"line":78,"column":0},"end":{"line":78,"column":48}},"8":{"start":{"line":131,"column":0},"end":{"line":131,"column":46}},"9":{"start":{"line":159,"column":0},"end":{"line":159,"column":86}},"10":{"start":{"line":204,"column":0},"end":{"line":204,"column":95}},"11":{"start":{"line":205,"column":0},"end":{"line":205,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1},"f":{"0":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/USER/Documents/andela/backend-mybrand/src/routes/userRoutes.ts","sources":["C:/Users/USER/Documents/andela/backend-mybrand/src/routes/userRoutes.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,iEAA8D;AAC9D,8EAAiG;AAEjG,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC;;;;;GAKG;AAEH;;;;;;;;GAQG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AAEH,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAM,CAAC,CAAC;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmDG;AACH,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,sBAAK,CAAC,CAAA;AAE5B;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,CAAC,GAAG,CAAC,YAAY,EAAC,+BAAc,EAAE,0BAAS,CAAC,CAAA;AAElD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAC,+BAAc,EAAE,2BAAU,CAAC,CAAA;AAE3D,kBAAe,MAAM,CAAC","sourcesContent":["import express from 'express';\r\nimport { authentication } from '../middleware/authentication';\r\nimport { login, signUp, viewUsers, deleteuser } from '../modules/user/controller/userController';\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Users\r\n *   description: Users routes\r\n */\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   securitySchemes:\r\n *     bearerAuth:\r\n *       type: apiKey\r\n *       name: authorization\r\n *       in: header\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /users/signUp:\r\n *   post:\r\n *     summary: Signup a new user\r\n *     tags:\r\n *       - Users\r\n *     requestBody:\r\n *       description: User data\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               username:\r\n *                 type: string\r\n *               email:\r\n *                 type: string\r\n *               password:\r\n *                 type: string\r\n *           example:\r\n *             username: solange\r\n *             email: solange@gmail.com\r\n *             password: solange123\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 status:\r\n *                   type: string\r\n *                   example: success\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     user:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         username:\r\n *                           type: string\r\n *                         email:\r\n *                           type: string\r\n *       404:\r\n *         description: Bad Request\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\n\r\nrouter.post('/signUp', signUp);\r\n\r\n/**\r\n * @swagger\r\n * /users/login:\r\n *   post:\r\n *     summary: Login a user\r\n *     tags:\r\n *       - Users\r\n *     requestBody:\r\n *       description: User credentials\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               email:\r\n *                 type: string\r\n *               password:\r\n *                 type: string\r\n *           example:\r\n *             email: \"ihirwe@gmail.com\"\r\n *             password: \"solange123\"\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 status:\r\n *                   type: string\r\n *                   example: \"success\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     user:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         username:\r\n *                           type: string\r\n *                         email:\r\n *                           type: string\r\n *                     token:\r\n *                       type: string\r\n *       404:\r\n *         description: Bad Request\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.post('/login', login)\r\n\r\n/**\r\n * @swagger\r\n * /users/viewusers:\r\n *   get:\r\n *     security:\r\n *       - bearerAuth: []\r\n *     summary: Get a list of all users\r\n *     tags:\r\n *       - Users\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"All users successfully found\"\r\n *                 data:\r\n *                   type: object\r\n *       404:\r\n *         description: User not found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.get('/viewusers',authentication, viewUsers)\r\n\r\n/**\r\n * @swagger\r\n * /users/deleteuser/{id}:\r\n *   delete:\r\n *     security:\r\n *       - bearerAuth: []\r\n *     summary: Delete a user by ID\r\n *     tags:\r\n *       - Users\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: User ID\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"User deleted successfully\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     deletedUser:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         username:\r\n *                           type: string\r\n *                         email:\r\n *                           type: string\r\n *       404:\r\n *         description: User not found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.delete('/deleteuser/:id',authentication, deleteuser)\r\n\r\nexport default router;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bd947e3c680a69ae7e98e6489f212939b8bb4557"},"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\middleware\\authentication.ts":{"path":"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\middleware\\authentication.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":32}},"4":{"start":{"line":7,"column":23},"end":{"line":7,"column":63}},"5":{"start":{"line":8,"column":16},"end":{"line":8,"column":55}},"6":{"start":{"line":9,"column":23},"end":{"line":22,"column":1}},"7":{"start":{"line":10,"column":23},"end":{"line":10,"column":51}},"8":{"start":{"line":11,"column":18},"end":{"line":11,"column":56}},"9":{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},"10":{"start":{"line":13,"column":8},"end":{"line":13,"column":78}},"11":{"start":{"line":15,"column":4},"end":{"line":21,"column":7}},"12":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"13":{"start":{"line":17,"column":12},"end":{"line":17,"column":82}},"14":{"start":{"line":19,"column":8},"end":{"line":19,"column":36}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":15}},"16":{"start":{"line":23,"column":0},"end":{"line":23,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":23},"end":{"line":9,"column":24}},"loc":{"start":{"line":9,"column":43},"end":{"line":22,"column":1}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":50},"end":{"line":15,"column":51}},"loc":{"start":{"line":15,"column":68},"end":{"line":21,"column":5}},"line":15}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":8,"column":16},"end":{"line":8,"column":55}},"type":"binary-expr","locations":[{"start":{"line":8,"column":16},"end":{"line":8,"column":43}},{"start":{"line":8,"column":47},"end":{"line":8,"column":55}}],"line":8},"4":{"loc":{"start":{"line":11,"column":18},"end":{"line":11,"column":56}},"type":"binary-expr","locations":[{"start":{"line":11,"column":18},"end":{"line":11,"column":28}},{"start":{"line":11,"column":32},"end":{"line":11,"column":56}}],"line":11},"5":{"loc":{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},{"start":{"line":12,"column":4},"end":{"line":14,"column":5}}],"line":12},"6":{"loc":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},{"start":{"line":16,"column":8},"end":{"line":18,"column":9}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":13,"8":13,"9":13,"10":6,"11":7,"12":7,"13":0,"14":7,"15":7,"16":1},"f":{"0":1,"1":13,"2":7},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1,1],"4":[13,12],"5":[6,7],"6":[0,7]},"inputSourceMap":{"version":3,"file":"C:/Users/USER/Documents/andela/backend-mybrand/src/middleware/authentication.ts","sources":["C:/Users/USER/Documents/andela/backend-mybrand/src/middleware/authentication.ts"],"names":[],"mappings":";;;;;;AAAA,gEAA+B;AAG/B,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,QAAQ,CAAC;AAEjD,MAAM,cAAc,GAAG,CAC5B,GAAoB,EACpB,GAAqB,EACrB,IAA0B,EAC1B,EAAE;IACF,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAChD,MAAM,KAAK,GAAG,UAAU,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAErD,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC,CAAC;IACxE,CAAC;IACD,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;QAC1C,IAAI,GAAG,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC,CAAC;QACxE,CAAC;QACA,GAAW,CAAC,MAAM,GAAI,OAAe,CAAC,MAAM,CAAC;QAC9C,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAlBW,QAAA,cAAc,kBAkBzB","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport express from 'express';\r\n\r\nconst JWT_KEY = process.env.WEBTOKEN_SECRET || \"SECRET\";\r\n\r\nexport const authentication = (\r\n  req: express.Request,\r\n  res: express.Response,\r\n  next: express.NextFunction\r\n) => {\r\n  const authHeader = req.headers[\"authorization\"];\r\n  const token = authHeader && authHeader.split(\" \")[1];\r\n\r\n  if (!token) {\r\n    return res.json({ status: false, message: \"you are not logged in.\" });\r\n  }\r\n  jwt.verify(token, JWT_KEY, (err, decoded) => {\r\n    if (err) {\r\n      return res.json({ status: false, message: \"your account not found\" });\r\n    }\r\n    (req as any).userId = (decoded as any).userId;\r\n    next();\r\n  });\r\n};\r\n\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e17d1830200b9b9b7b711cb5011b8bf257b4a7c9"},"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\messageRoutes.ts":{"path":"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\messageRoutes.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":64}},"5":{"start":{"line":8,"column":28},"end":{"line":8,"column":86}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":41}},"7":{"start":{"line":78,"column":0},"end":{"line":78,"column":65}},"8":{"start":{"line":118,"column":0},"end":{"line":118,"column":94}},"9":{"start":{"line":165,"column":0},"end":{"line":165,"column":104}},"10":{"start":{"line":166,"column":0},"end":{"line":166,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{"0":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/USER/Documents/andela/backend-mybrand/src/routes/messageRoutes.ts","sources":["C:/Users/USER/Documents/andela/backend-mybrand/src/routes/messageRoutes.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,iEAA8D;AAC9D,uFAA6G;AAE7G,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC;;;;;GAKG;AAEH;;;;;;;;GAQG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AAEH,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,iCAAa,CAAC,CAAC;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH,MAAM,CAAC,GAAG,CAAC,cAAc,EAAC,+BAAc,EAAE,gCAAY,CAAC,CAAC;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AACH,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE,+BAAc,EAAG,iCAAa,CAAC,CAAA;AAEnE,kBAAe,MAAM,CAAC","sourcesContent":["import express from 'express';\r\nimport { authentication } from '../middleware/authentication';\r\nimport { createMessage, viewMessages, deleteMessage } from '../modules/message/controller/messageController';\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Message\r\n *   description: Message routes\r\n */\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   securitySchemes:\r\n *     bearerAuth:\r\n *       type: apiKey\r\n *       name: authorization\r\n *       in: header\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /messages/createMessage:\r\n *   post:\r\n *     summary: Create a new message\r\n *     tags:\r\n *       - Message\r\n *     requestBody:\r\n *       description: message data\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               name:\r\n *                 type: string\r\n *               email:\r\n *                 type: string\r\n *               message:\r\n *                 type: string\r\n *           example:\r\n *             name: \"solange\"\r\n *             email: \"solange@gmail.com\"\r\n *             message: \"Hello there!\"\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Message Sent\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     newMessage:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         name:\r\n *                           type: string\r\n *                         email:\r\n *                           type: string\r\n *                         message:\r\n *                           type: string\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\n\r\nrouter.post(\"/createMessage\", createMessage);\r\n\r\n/**\r\n * @swagger\r\n * /messages/viewMessage:\r\n *   get:\r\n *     security:\r\n *       - bearerAuth: []\r\n *     summary: Get a list of all messages\r\n *     tags:\r\n *       - Message\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"All Messages successfully found\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     allMessages:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         name:\r\n *                           type: string\r\n *                         email:\r\n *                           type: string\r\n *                         message:\r\n *                           type: string\r\n *       404:\r\n *         description: messages were not found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.get(\"/viewMessage\",authentication, viewMessages);\r\n\r\n/**\r\n * @swagger\r\n * /messages/deleteMessage/{id}:\r\n *   delete:\r\n *     security:\r\n *       - bearerAuth: []\r\n *     summary: Delete a message by ID\r\n *     tags:\r\n *       - Message\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: message ID\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Message deleted successfully\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     deletedMessage:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         name:\r\n *                           type: string\r\n *                         email:\r\n *                           type: string\r\n *                         message:\r\n *                           type: string\r\n *       404:\r\n *         description: Message not found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.delete(\"/deleteMessage/:id\", authentication,  deleteMessage)\r\n\r\nexport default router;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9ceb9105258456083dafbf63bc1dd94d9d8bd788"},"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\blogRoutes.ts":{"path":"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\routes\\blogRoutes.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":64}},"5":{"start":{"line":8,"column":25},"end":{"line":8,"column":78}},"6":{"start":{"line":9,"column":17},"end":{"line":9,"column":60}},"7":{"start":{"line":10,"column":15},"end":{"line":10,"column":41}},"8":{"start":{"line":82,"column":0},"end":{"line":82,"column":125}},"9":{"start":{"line":127,"column":0},"end":{"line":127,"column":53}},"10":{"start":{"line":177,"column":0},"end":{"line":177,"column":63}},"11":{"start":{"line":229,"column":0},"end":{"line":229,"column":96}},"12":{"start":{"line":278,"column":0},"end":{"line":278,"column":127}},"13":{"start":{"line":279,"column":0},"end":{"line":279,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1},"f":{"0":2},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2]},"inputSourceMap":{"version":3,"file":"C:/Users/USER/Documents/andela/backend-mybrand/src/routes/blogRoutes.ts","sources":["C:/Users/USER/Documents/andela/backend-mybrand/src/routes/blogRoutes.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,iEAA8D;AAC9D,+EAMoD;AACpD,6DAAqC;AAErC,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC;;;;;GAKG;AAEH;;;;;;;;GAQG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuDG;AACH,MAAM,CAAC,IAAI,CACP,cAAc,EACd,+BAAc,EACd,gBAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EACtB,4BAAW,CACd,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,0BAAS,CAAC,CAAC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDG;AACH,MAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE,6BAAY,CAAC,CAAC;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkDG;AACH,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,+BAAc,EAAE,4BAAW,CAAC,CAAC;AAE9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+CG;AACH,MAAM,CAAC,GAAG,CACN,iBAAiB,EACjB,+BAAc,EACd,gBAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EACtB,4BAAW,CACd,CAAC;AAEF,kBAAe,MAAM,CAAC","sourcesContent":["import express from \"express\";\r\nimport { authentication } from \"../middleware/authentication\";\r\nimport {\r\n    createBlogs,\r\n    viewBlogs,\r\n    viewBlogById,\r\n    deletedBlog,\r\n    updatedBlog,\r\n} from \"../modules/blogs/controller/blogController\";\r\nimport upload from \"../utils/multer\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Blogs\r\n *   description: Blogs routes\r\n */\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   securitySchemes:\r\n *     bearerAuth:\r\n *       type: apiKey\r\n *       name: authorization\r\n *       in: header\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /blogs/createBlogs:\r\n *   post:\r\n *     security:\r\n *       - bearerAuth: []\r\n *     summary: Create a new blog\r\n *     tags:\r\n *       - Blogs\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               image:\r\n *                 type: string\r\n *                 format: binary\r\n *               title:\r\n *                 type: string\r\n *               description:\r\n *                 type: string\r\n *               content:\r\n *                 type: string\r\n *     responses:\r\n *       200:\r\n *         description: Blog created successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 blogDetail:\r\n *                   type: object\r\n *                   properties:\r\n *                     _id:\r\n *                       type: string\r\n *                     title:\r\n *                       type: string\r\n *                     description:\r\n *                       type: string\r\n *                     content:\r\n *                       type: string\r\n *                     image:\r\n *                       type: string\r\n *                     date:\r\n *                       type: date\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Blog created successfully\"\r\n *       404:\r\n *         description: Image not uploaded\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.post(\r\n    \"/createBlogs\",\r\n    authentication,\r\n    upload.single(\"image\"),\r\n    createBlogs\r\n);\r\n\r\n/**\r\n * @swagger\r\n * /blogs/viewBlogs:\r\n *   get:\r\n *     summary: Get a list of all blogs\r\n *     tags:\r\n *       - Blogs\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: All blogs successfully found\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     allBlogs:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           _id:\r\n *                             type: string\r\n *                           title:\r\n *                             type: string\r\n *                           description:\r\n *                             type: string\r\n *                           content:\r\n *                             type: string\r\n *                           image:\r\n *                             type: string\r\n *                           date:\r\n *                             type: string\r\n *                             format: date\r\n *       404:\r\n *         description: Blogs were not found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.get(\"/viewBlogs\", viewBlogs);\r\n\r\n/**\r\n * @swagger\r\n * /blogs/viewBlogById/{id}:\r\n *   get:\r\n *     summary: Get a blog by ID\r\n *     tags:\r\n *       - Blogs\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: Blog ID\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: Blog found successfully\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     viewBlog:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         title:\r\n *                           type: string\r\n *                         description:\r\n *                           type: string\r\n *                         content:\r\n *                           type: string\r\n *                         image:\r\n *                           type: string\r\n *                         date:\r\n *                           type: string\r\n *                           format: date\r\n *       404:\r\n *         description: No blog found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.get(\"/viewBlogById/:id\", viewBlogById);\r\n\r\n/**\r\n * @swagger\r\n * /blogs/deleteBlog/{id}:\r\n *   delete:\r\n *     security:\r\n *       - bearerAuth: []\r\n *     summary: Delete a blog by ID\r\n *     tags:\r\n *       - Blogs\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: Blog ID\r\n *     responses:\r\n *       200:\r\n *         description: Success\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: Blog deleted successfully\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     deletedBlog:\r\n *                       type: object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                         title:\r\n *                           type: string\r\n *                         description:\r\n *                           type: string\r\n *                         content:\r\n *                           type: string\r\n *                         image:\r\n *                           type: string\r\n *                         date:\r\n *                           type: string\r\n *                           format: date\r\n *       404:\r\n *         description: No blog found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.delete(\"/deleteBlog/:id\", authentication, deletedBlog);\r\n\r\n/**\r\n * @swagger\r\n * /blogs/updateBlog/{id}:\r\n *   put:\r\n *     security:\r\n *       - bearerAuth: []\r\n *     summary: Update a blog by ID\r\n *     tags:\r\n *       - Blogs\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: Blog ID\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               image:\r\n *                 type: string\r\n *                 format: binary\r\n *               title:\r\n *                 type: string\r\n *               description:\r\n *                 type: string\r\n *               content:\r\n *                 type: string\r\n *     responses:\r\n *       200:\r\n *         description: Blog updated successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"Blog updated successfully\"\r\n *       404:\r\n *         description: Blog not found\r\n *       500:\r\n *         description: Internal Server Error\r\n */\r\nrouter.put(\r\n    \"/updateBlog/:id\",\r\n    authentication,\r\n    upload.single(\"image\"),\r\n    updatedBlog\r\n);\r\n\r\nexport default router;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"27e319eae73e2a9a514ba5f61229d4779a0235aa"},"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\modules\\blogs\\controller\\blogController.ts":{"path":"C:\\Users\\USER\\Documents\\andela\\backend-mybrand\\src\\modules\\blogs\\controller\\blogController.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"13":{"start":{"line":12,"column":0},"end":{"line":12,"column":116}},"14":{"start":{"line":13,"column":19},"end":{"line":13,"column":52}},"15":{"start":{"line":14,"column":21},"end":{"line":14,"column":57}},"16":{"start":{"line":15,"column":21},"end":{"line":15,"column":53}},"17":{"start":{"line":16,"column":21},"end":{"line":25,"column":2}},"18":{"start":{"line":16,"column":39},"end":{"line":25,"column":2}},"19":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"20":{"start":{"line":20,"column":19},"end":{"line":20,"column":143}},"21":{"start":{"line":21,"column":4},"end":{"line":24,"column":6}},"22":{"start":{"line":27,"column":0},"end":{"line":56,"column":4}},"23":{"start":{"line":27,"column":49},"end":{"line":56,"column":2}},"24":{"start":{"line":28,"column":4},"end":{"line":55,"column":5}},"25":{"start":{"line":29,"column":8},"end":{"line":33,"column":9}},"26":{"start":{"line":30,"column":12},"end":{"line":32,"column":15}},"27":{"start":{"line":34,"column":23},"end":{"line":34,"column":51}},"28":{"start":{"line":36,"column":25},"end":{"line":44,"column":9}},"29":{"start":{"line":46,"column":22},"end":{"line":46,"column":64}},"30":{"start":{"line":47,"column":8},"end":{"line":49,"column":79}},"31":{"start":{"line":58,"column":18},"end":{"line":77,"column":2}},"32":{"start":{"line":58,"column":32},"end":{"line":77,"column":2}},"33":{"start":{"line":59,"column":4},"end":{"line":76,"column":5}},"34":{"start":{"line":60,"column":25},"end":{"line":60,"column":59}},"35":{"start":{"line":61,"column":8},"end":{"line":65,"column":9}},"36":{"start":{"line":66,"column":8},"end":{"line":69,"column":11}},"37":{"start":{"line":78,"column":0},"end":{"line":78,"column":30}},"38":{"start":{"line":79,"column":21},"end":{"line":100,"column":2}},"39":{"start":{"line":79,"column":35},"end":{"line":100,"column":2}},"40":{"start":{"line":80,"column":4},"end":{"line":99,"column":5}},"41":{"start":{"line":81,"column":23},"end":{"line":81,"column":36}},"42":{"start":{"line":82,"column":29},"end":{"line":82,"column":70}},"43":{"start":{"line":83,"column":8},"end":{"line":87,"column":9}},"44":{"start":{"line":84,"column":12},"end":{"line":86,"column":15}},"45":{"start":{"line":88,"column":25},"end":{"line":88,"column":66}},"46":{"start":{"line":89,"column":8},"end":{"line":92,"column":11}},"47":{"start":{"line":101,"column":0},"end":{"line":101,"column":36}},"48":{"start":{"line":103,"column":20},"end":{"line":124,"column":2}},"49":{"start":{"line":103,"column":34},"end":{"line":124,"column":2}},"50":{"start":{"line":104,"column":4},"end":{"line":123,"column":5}},"51":{"start":{"line":105,"column":23},"end":{"line":105,"column":36}},"52":{"start":{"line":106,"column":29},"end":{"line":106,"column":70}},"53":{"start":{"line":107,"column":8},"end":{"line":111,"column":9}},"54":{"start":{"line":108,"column":12},"end":{"line":110,"column":15}},"55":{"start":{"line":112,"column":28},"end":{"line":112,"column":68}},"56":{"start":{"line":113,"column":8},"end":{"line":116,"column":11}},"57":{"start":{"line":125,"column":0},"end":{"line":125,"column":34}},"58":{"start":{"line":127,"column":0},"end":{"line":164,"column":4}},"59":{"start":{"line":127,"column":49},"end":{"line":164,"column":2}},"60":{"start":{"line":128,"column":4},"end":{"line":163,"column":5}},"61":{"start":{"line":129,"column":23},"end":{"line":129,"column":36}},"62":{"start":{"line":130,"column":8},"end":{"line":135,"column":9}},"63":{"start":{"line":131,"column":12},"end":{"line":133,"column":15}},"64":{"start":{"line":134,"column":12},"end":{"line":134,"column":19}},"65":{"start":{"line":136,"column":23},"end":{"line":136,"column":51}},"66":{"start":{"line":138,"column":21},"end":{"line":146,"column":9}},"67":{"start":{"line":147,"column":28},"end":{"line":147,"column":74}},"68":{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},"69":{"start":{"line":149,"column":12},"end":{"line":151,"column":15}},"70":{"start":{"line":153,"column":8},"end":{"line":156,"column":11}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":16,"column":21},"end":{"line":16,"column":22}},"loc":{"start":{"line":16,"column":39},"end":{"line":25,"column":2}},"line":16},"8":{"name":"(anonymous_8)","decl":{"start":{"line":16,"column":73},"end":{"line":16,"column":74}},"loc":{"start":{"line":16,"column":86},"end":{"line":25,"column":1}},"line":16},"9":{"name":"(anonymous_9)","decl":{"start":{"line":27,"column":35},"end":{"line":27,"column":36}},"loc":{"start":{"line":27,"column":49},"end":{"line":56,"column":2}},"line":27},"10":{"name":"(anonymous_10)","decl":{"start":{"line":27,"column":83},"end":{"line":27,"column":84}},"loc":{"start":{"line":27,"column":96},"end":{"line":56,"column":1}},"line":27},"11":{"name":"(anonymous_11)","decl":{"start":{"line":58,"column":18},"end":{"line":58,"column":19}},"loc":{"start":{"line":58,"column":32},"end":{"line":77,"column":2}},"line":58},"12":{"name":"(anonymous_12)","decl":{"start":{"line":58,"column":66},"end":{"line":58,"column":67}},"loc":{"start":{"line":58,"column":79},"end":{"line":77,"column":1}},"line":58},"13":{"name":"(anonymous_13)","decl":{"start":{"line":79,"column":21},"end":{"line":79,"column":22}},"loc":{"start":{"line":79,"column":35},"end":{"line":100,"column":2}},"line":79},"14":{"name":"(anonymous_14)","decl":{"start":{"line":79,"column":69},"end":{"line":79,"column":70}},"loc":{"start":{"line":79,"column":82},"end":{"line":100,"column":1}},"line":79},"15":{"name":"(anonymous_15)","decl":{"start":{"line":103,"column":20},"end":{"line":103,"column":21}},"loc":{"start":{"line":103,"column":34},"end":{"line":124,"column":2}},"line":103},"16":{"name":"(anonymous_16)","decl":{"start":{"line":103,"column":68},"end":{"line":103,"column":69}},"loc":{"start":{"line":103,"column":81},"end":{"line":124,"column":1}},"line":103},"17":{"name":"(anonymous_17)","decl":{"start":{"line":127,"column":35},"end":{"line":127,"column":36}},"loc":{"start":{"line":127,"column":49},"end":{"line":164,"column":2}},"line":127},"18":{"name":"(anonymous_18)","decl":{"start":{"line":127,"column":83},"end":{"line":127,"column":84}},"loc":{"start":{"line":127,"column":96},"end":{"line":164,"column":1}},"line":127}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},{"start":{"line":17,"column":4},"end":{"line":19,"column":5}}],"line":17},"6":{"loc":{"start":{"line":20,"column":65},"end":{"line":20,"column":142}},"type":"cond-expr","locations":[{"start":{"line":20,"column":116},"end":{"line":20,"column":122}},{"start":{"line":20,"column":125},"end":{"line":20,"column":142}}],"line":20},"7":{"loc":{"start":{"line":20,"column":65},"end":{"line":20,"column":113}},"type":"binary-expr","locations":[{"start":{"line":20,"column":65},"end":{"line":20,"column":86}},{"start":{"line":20,"column":90},"end":{"line":20,"column":113}}],"line":20},"8":{"loc":{"start":{"line":29,"column":8},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":33,"column":9}},{"start":{"line":29,"column":8},"end":{"line":33,"column":9}}],"line":29},"9":{"loc":{"start":{"line":41,"column":27},"end":{"line":41,"column":91}},"type":"cond-expr","locations":[{"start":{"line":41,"column":66},"end":{"line":41,"column":72}},{"start":{"line":41,"column":75},"end":{"line":41,"column":91}}],"line":41},"10":{"loc":{"start":{"line":41,"column":27},"end":{"line":41,"column":63}},"type":"binary-expr","locations":[{"start":{"line":41,"column":27},"end":{"line":41,"column":42}},{"start":{"line":41,"column":46},"end":{"line":41,"column":63}}],"line":41},"11":{"loc":{"start":{"line":42,"column":21},"end":{"line":42,"column":86}},"type":"cond-expr","locations":[{"start":{"line":42,"column":60},"end":{"line":42,"column":66}},{"start":{"line":42,"column":69},"end":{"line":42,"column":86}}],"line":42},"12":{"loc":{"start":{"line":42,"column":21},"end":{"line":42,"column":57}},"type":"binary-expr","locations":[{"start":{"line":42,"column":21},"end":{"line":42,"column":36}},{"start":{"line":42,"column":40},"end":{"line":42,"column":57}}],"line":42},"13":{"loc":{"start":{"line":61,"column":8},"end":{"line":65,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":65,"column":9}},{"start":{"line":61,"column":8},"end":{"line":65,"column":9}}],"line":61},"14":{"loc":{"start":{"line":61,"column":12},"end":{"line":61,"column":46}},"type":"binary-expr","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":21}},{"start":{"line":61,"column":25},"end":{"line":61,"column":46}}],"line":61},"15":{"loc":{"start":{"line":83,"column":8},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":87,"column":9}},{"start":{"line":83,"column":8},"end":{"line":87,"column":9}}],"line":83},"16":{"loc":{"start":{"line":107,"column":8},"end":{"line":111,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":111,"column":9}},{"start":{"line":107,"column":8},"end":{"line":111,"column":9}}],"line":107},"17":{"loc":{"start":{"line":130,"column":8},"end":{"line":135,"column":9}},"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":135,"column":9}},{"start":{"line":130,"column":8},"end":{"line":135,"column":9}}],"line":130},"18":{"loc":{"start":{"line":143,"column":27},"end":{"line":143,"column":91}},"type":"cond-expr","locations":[{"start":{"line":143,"column":66},"end":{"line":143,"column":72}},{"start":{"line":143,"column":75},"end":{"line":143,"column":91}}],"line":143},"19":{"loc":{"start":{"line":143,"column":27},"end":{"line":143,"column":63}},"type":"binary-expr","locations":[{"start":{"line":143,"column":27},"end":{"line":143,"column":42}},{"start":{"line":143,"column":46},"end":{"line":143,"column":63}}],"line":143},"20":{"loc":{"start":{"line":144,"column":21},"end":{"line":144,"column":86}},"type":"cond-expr","locations":[{"start":{"line":144,"column":60},"end":{"line":144,"column":66}},{"start":{"line":144,"column":69},"end":{"line":144,"column":86}}],"line":144},"21":{"loc":{"start":{"line":144,"column":21},"end":{"line":144,"column":57}},"type":"binary-expr","locations":[{"start":{"line":144,"column":21},"end":{"line":144,"column":36}},{"start":{"line":144,"column":40},"end":{"line":144,"column":57}}],"line":144},"22":{"loc":{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},{"start":{"line":148,"column":8},"end":{"line":152,"column":9}}],"line":148}},"s":{"0":1,"1":16,"2":3,"3":13,"4":16,"5":16,"6":0,"7":0,"8":0,"9":0,"10":29,"11":13,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":3,"19":3,"20":3,"21":3,"22":1,"23":2,"24":2,"25":2,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":2,"42":2,"43":2,"44":1,"45":1,"46":1,"47":1,"48":1,"49":2,"50":2,"51":2,"52":2,"53":2,"54":1,"55":1,"56":1,"57":1,"58":1,"59":3,"60":3,"61":3,"62":3,"63":1,"64":1,"65":2,"66":2,"67":2,"68":2,"69":1,"70":2},"f":{"0":13,"1":16,"2":3,"3":13,"4":16,"5":0,"6":29,"7":3,"8":3,"9":2,"10":2,"11":1,"12":1,"13":2,"14":2,"15":2,"16":2,"17":3,"18":3},"b":{"0":[1,1,1],"1":[13,3],"2":[13,13],"3":[13,16],"4":[13,13],"5":[0,3],"6":[0,3],"7":[3,3],"8":[1,1],"9":[0,1],"10":[1,1],"11":[0,1],"12":[1,1],"13":[0,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,2],"18":[0,2],"19":[2,2],"20":[0,2],"21":[2,2],"22":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/USER/Documents/andela/backend-mybrand/src/modules/blogs/controller/blogController.ts","sources":["C:/Users/USER/Documents/andela/backend-mybrand/src/modules/blogs/controller/blogController.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport { createBlog, getAllBlog, getBlogById, deleteBlog, updateBlog } from \"../repository/blogRepo\";\r\nimport { cloudinary } from \"../../../utils/cloudinary\";\r\nconst asyncHandler = require(\"express-async-handler\");\r\n\r\nconst uploadImages = async (\r\n  fileToUpload: any\r\n): Promise<{ public_id: string; secure_url: string }> => {\r\n    if (!fileToUpload.path) {\r\n      // throw new Error(\"No file uploaded\");\r\n    }\r\n    const result = await cloudinary.uploader.upload(fileToUpload?.path);\r\n    return {\r\n      public_id: result.public_id,\r\n      secure_url: result.secure_url,\r\n    };\r\n};\r\n//create blogs\r\nexport const createBlogs = asyncHandler(\r\n  async (req: express.Request, res: express.Response): Promise<any> => {\r\n    try {\r\n      if (!req.file) {\r\n        return res.status(404).json({\r\n          message: \"Please upload an image\",\r\n        });\r\n      }\r\n      const result = await uploadImages(req.file);\r\n      //console.log(result)\r\n      const blogData = {\r\n        title: req.body.title,\r\n        description: req.body.description,\r\n        content: req.body.content,\r\n        image: {\r\n          public_id: result?.public_id,\r\n          url: result?.secure_url,\r\n        },\r\n      };\r\n      //console.log(blogData)\r\n      const blogs = await createBlog(blogData);\r\n      res\r\n        .status(200)\r\n        .json({ blogDetail: blogs, message: \"Blog created successfully\" });\r\n    } catch (error) {\r\n      // res.status(500).json({\r\n      //   message: \"Internal server error\",\r\n      // });\r\n    }\r\n  }\r\n);\r\n\r\n//get all blogs\r\nexport const viewBlogs = async (\r\n  req: express.Request,\r\n  res: express.Response\r\n) => {\r\n  try {\r\n    const allBlogs = await getAllBlog();\r\n    if (!allBlogs || allBlogs.length === 0) {\r\n      // return res.status(404).json({\r\n      //   message: \"blogs were not found\",\r\n      // });\r\n    }\r\n    return res.status(200).json({\r\n      message: \"all blogs were successfully found\",\r\n      data: allBlogs,\r\n    });\r\n  } catch (error: any) {\r\n    // return res.status(500).json({\r\n    //   message: \"Internal Server Error\",\r\n    //   error: error.message,\r\n    // });\r\n  }\r\n};\r\n\r\nexport const viewBlogById = async (\r\n  req: express.Request,\r\n  res: express.Response\r\n) => {\r\n  try {\r\n    const blogId = req.params.id;\r\n    const existingBlog = await getBlogById(blogId);\r\n    if (!existingBlog) {\r\n      return res.status(404).json({\r\n        message: \"No blog found\",\r\n      });\r\n    }\r\n    const viewBlog = await getBlogById(blogId);\r\n    return res.status(200).json({\r\n      message: \"Blog found successfully\",\r\n      data: viewBlog,\r\n    });\r\n  } catch (error: any) {\r\n    // return res.status(500).json({\r\n    //   message: \"Internal Server Error\",\r\n    //   error: error.message,\r\n    // });\r\n  }\r\n};\r\n\r\n//delete blog by id\r\nexport const deletedBlog = async (\r\n  req: express.Request,\r\n  res: express.Response\r\n) => {\r\n  try {\r\n    const blogId = req.params.id;\r\n    const existingBlog = await getBlogById(blogId);\r\n    if (!existingBlog) {\r\n      return res.status(404).json({\r\n        message: \"No blog found\",\r\n      });\r\n    }\r\n    const deletedBlog = await deleteBlog(blogId);\r\n    return res.status(200).json({\r\n      message: \"Blog deleted successfully\",\r\n      data: deletedBlog,\r\n    });\r\n  } catch (error: any) {\r\n    // return res.status(500).json({\r\n    //   message: \"Internal Server Error\",\r\n    //   error: error.message,\r\n    // });\r\n  }\r\n};\r\n\r\n//update blog by id\r\nexport const updatedBlog = asyncHandler(\r\n  async (req: express.Request, res: express.Response): Promise<void> => {\r\n    try {\r\n      const blogId = req.params.id;\r\n      if (!req.file) {\r\n        res.status(404).json({\r\n          message: \"Please upload an image\",\r\n        });\r\n        return;\r\n      }\r\n      const result = await uploadImages(req.file);\r\n      //console.log(result);\r\n      const body = {\r\n        title: req.body.title,\r\n        description: req.body.description,\r\n        content: req.body.content,\r\n        image: {\r\n          public_id: result?.public_id,\r\n          url: result?.secure_url,\r\n        },\r\n      };\r\n\r\n      const updatedBlog = await updateBlog(blogId, body);\r\n      if (!updatedBlog) {\r\n        res.status(404).json({\r\n          message: `Blog with ${blogId} is not found.`,\r\n        });\r\n      }\r\n      res.status(200).json({\r\n        message: \"Blog Updated successfully\",\r\n        data: updatedBlog,\r\n      });\r\n    } catch (error: any) {\r\n      // res.status(500).json({\r\n      //   message: \"Internal Server Error\",\r\n      //   error: error.message,\r\n      // });\r\n    }\r\n  }\r\n);"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a37cf4e8653bb3daa6e9bf708a545f9c03d2b45e"}}